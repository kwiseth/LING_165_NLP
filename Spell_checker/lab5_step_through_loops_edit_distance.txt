From Rice University Algorithms course ::  https://www.clear.rice.edu/comp130/12spring/editdist/



def edit_dist_matrix(a, b):
    """Generate the edit distance matrix for transforming string a into string b."""
    Create an empty len(a)+1 x len(b)+1 matrix ("d" below)
    Fill the matrix with the base case values
    Loop though each INDUCTIVE case row (sub-strings of a)
       Loop through each INDUCTIVE case column (sub-strings of b)
           if the corresponding characters of a & b are the same (watch the indexing here!), d[i][j] = d[i-1][j-1]
           else d[i][j] = 1 + the minimum of d[i, j-1], d[i-1][j], d[i-1][j-1]
    return the matrix
     
# The edit distance is the matrix's last element (bottom right cell)
# Write a separate function to retrieve the final edit distance, given the two strings, a and b.



For any list in Python, aList[-1] is the last element of the list.
Write utility functions to make your initial, unfilled matix

    To make a list of nVals elements filled with a value, val, write:   aList = [val]*nVals
        Note that the foillowing code does NOT work properly because the exact same list, not a copy, is put in each row:  aMatrix = [[val]*nCols]*nRows
        You must use a loop or a list comprehension to create the rows of a matrix.

Here's a useful little function to print a 2-D matix nicely:

def print_matrix(m):
    """Print a 2-D matrix with each row on a different line."""
    for row in m:
        print row



This is the recursive form of the minimum edit distance:

def lev(a, b):
    """Recursively calculate the Levenshtein edit distance between two strings, a and b.
    Returns the edit distance.
    """
    if("" == a): 
        return len(b)   # returns if a is an empty string
    if("" == b): 
        return len(a)   # returns if b is an empty string
    return min(lev(a[:-1], b[:-1])+(a[-1] != b[-1]), lev(a[:-1], b)+1, lev(a, b[:-1])+1)  # Note: True=1 and False=0 when adding a boolean to an integer
    




========================================================




>>> source = "dog"
>>> target = "cat"
>>> m = len(source)
>>> n = len(target)
>>> distance = [[0] * n for x in range(m)]
>>> print distance
[[0, 0, 0], [0, 0, 0], [0, 0, 0]]
>>> m = len(source) + 1
>>> n = len(target) + 1
>>> print distance
[[0, 0, 0], [0, 0, 0], [0, 0, 0]]
>>> distance = [[0] * n for x in range(m)]
>>> print distance
[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]
>>> distance_cf = [[0 for i in range(m)] for j in range(n)]
>>> print distance_cf
[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]


>>> for i in range(1, n):
... 	distance[i][0] = distance[i-1][0]
... 	print distance[i][0]
... 	
0
0
0
>>> for i in range(1, n):
... 	distance[i][0] = distance[i-1][0] + 1
... 	print distance[i][0]
... 	
1
2
3
>>> for j in range(1, m):
... 	distance[0][j] = distance[0][j-1] + 1
... 	print distance[0][j]
... 	
1
2
3
>>> for i in range(1, n):
... 	for j in range(1, m):
... 		distance[i][j] = min(distance[i-1][j]+1, distance[i][j-1]+1, distance[i-1][j-1] + 1)
... 		print distance[i][j]
... 		
1
2
3
2
2
3
3
3
3
>>> for i in range(1, n):
... 	for j in range(1, m):
... 		print source[i], target[j]
... 		
o a
o t
oTraceback (most recent call last):
  File "<interactive input>", line 3, in <module>
IndexError: string index out of range

>>> for i in range(1, n):
... 	print i
... 	
 1
2
3
>>> for i in range(1, n + 1):
... 	print distance[i-1][0], target[i-1]
... 	
0 c
1 a
2 t
3Traceback (most recent call last):
  File "<interactive input>", line 2, in <module>
IndexError: string index out of range